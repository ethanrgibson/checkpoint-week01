/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /gh/MickShannahan/style-debug@master/debug.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
let styleTag=document.createElement("style"),debugMenuStyleTag=document.createElement("style");debugMenuStyleTag.id="debug-menu-styles",styleTag.id="debug-styles";const button=document.createElement("button");button.id="debug-button",button.addEventListener("click",(()=>{settings[0].on?(settings[0].on=!1,document.body.classList.remove("debug"),unsetBgs()):(settings[0].on=!0,document.body.classList.add("debug"),implementStyles()),saveSettings(),drawButton()}));const settingsButton=document.createElement("button");settingsButton.id="debug-settings-button",settingsButton.innerText="⚙️",settingsButton.setAttribute("title","open settings menu"),settingsButton.addEventListener("click",toggleSettingsMenu);const settingsMenu=document.createElement("div");settingsMenu.id="debug-settings-menu",settingsMenu.setAttribute("class","d-none");let settings=[{name:"active",on:!0},{name:"menu open",on:!1},{name:"container outline",on:!0,color:"#00ffff"},{name:"row outline",on:!0,color:"#ae00ff"},{name:"column outline",on:!0,color:"#00ff37"},{name:"column color",on:!0,color:"#81cc6e"},{name:"flex lines",on:!0},{name:"relative visual",on:!0,color:"#ff0080"},{name:"absolute visual",on:!0,color:"#e6b4fe"},{name:"horizontal spill",on:!0},{name:"image squash",on:!0}];function getSetting(e,t="color"){const n=settings.find((t=>t.name==e));return n||console.error("no setting "+e),n[t]}const isValidHex=e=>/^#([A-Fa-f0-9]{3,4}){1,2}$/.test(e),getChunksFromString=(e,t)=>e.match(new RegExp(`.{${t}}`,"g")),convertHexUnitTo256=e=>parseInt(e.repeat(2/e.length),16);function getAlphafloat(e,t){return void 0!==e?e/255:"number"!=typeof t||t<0||t>1?1:t}function hexToRGBA(e,t){if(!isValidHex(e))throw new Error("Invalid HEX");const n=Math.floor((e.length-1)/3),o=getChunksFromString(e.slice(1),n),[i,l,s,r]=o.map(convertHexUnitTo256);return`rgba(${i}, ${l}, ${s}, ${getAlphafloat(r,t).toFixed(2)})`}const hexTransparency="40";function menuStyles(){let e="#232323cc",t=`\n  #debug-button {\n    position: fixed;\n    padding: 0px 10px;\n    left: 1em;\n    bottom: .25em;\n    border-radius: 50em;\n    background: ${e};\n    backdrop-filter: blur(10px);\n    color: #00ff37;\n    border: 0;\n  }\n  #debug-button.off{\n    filter: grayscale(1);\n  }\n  #debug-settings-button {\n    background-color: ${e};\n    backdrop-filter: blur(10px);\n    position: fixed;\n    bottom: .25em;\n    left: 5em;\n    border: 0;\n    border-radius: 50em;\n    padding: 0 10px;\n  }\n  \n  #debug-settings-menu {\n    width: max-content;\n    color: whitesmoke;\n    font-size: 14px;\n    padding: 5px;\n    border-radius: 12px;\n    background-color: ${e};\n    backdrop-filter: blur(10px);\n    border: 1px gray;\n    box-shadow: 0px 2px 2px #00000040;\n    position: fixed;\n    bottom: 2.5em;\n    left: 1em;\n  }\n  \n  #debug-settings-menu>div {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    background-image: unset;\n  }\n  \n  #debug-settings-menu input {\n    accent-color: rgb(80, 66, 235);\n  }\n  \n  #debug-settings-menu input[type*=color] {\n    width: 30px;\n    height: 1em;\n    margin-left: 5px;\n  }\n  `;debugMenuStyleTag.innerHTML=t}function implementStyles(){let e="";getSetting("container outline","on")&&(e+=`\n  body.debug .container,\n  body.debug .container-fluid {\n    outline: 2px solid ${getSetting("container outline")};\n    outline-offset: -1px;\n  }`),getSetting("row outline","on")&&(e+=`\n  body.debug .row, data.debug [data-debug*=flex] {\n    outline: 2px dashed ${getSetting("row outline")};\n    outline-offset: -2px;\n  }`),e+=`\n  body.debug *:not(:is([class*="container"], [class*=col]))>.row::before {\n   ${elementError("row out of container. Wrap rows with container or container-fluid")}\n  }`,e+=`body.debug .row>.row::before{\n    ${elementError("row nested directly in another row.")}\n  }\n  `,getSetting("column outline","on")&&(e+=`\n  body.debug [class*="col"] {\n    outline: 2px dotted ${getSetting("column outline")};\n    outline-offset: -3px;\n  }`),e+=`\n  body.debug [class*=col]>[class*=col]::before{\n    ${elementError("column nested directly in column, columns should only be children of rows")}\n  }\n  `,getSetting("relative visual","on")&&(e+=`\n  body.debug [data-debug*=relative]{\n    outline: 2px dotted ${getSetting("relative visual")}!important;\n  }\n  body.debug [data-debug*=relative]::before{\n    content: 'relative';\n    font-size: .75rem;\n    color: white;\n    background: ${getSetting("relative visual")}99;\n    position:absolute;\n    transform: translateY(-1.25rem);\n    padding: 0 5px;\n    border-radius: 50em;\n  }\n  `),getSetting("absolute visual","on")&&(e+=`\n  body.debug [data-debug*=absolute]{\n    outline: 2px dotted ${getSetting("absolute visual")}!important;\n    outline-offset: -1px;\n  }\n  body.debug [data-debug*=absolute]::before{\n    content: 'abs';\n    font-size: .75rem;\n    color: white;\n    background: ${getSetting("absolute visual")}99;\n    position:absolute;\n    top: 0;\n    left: -4.5ch;\n    padding: 0 5px;\n    border-radius: 50em;\n  }\n  `),e+=`\n  body.debug [data-debug*=out-of-bounds]{\n    outline: 4px double red !important;\n    outline-offset: -4px !important;\n  }\n\n  body.debug [data-debug*=out-of-bounds]::after{\n    ${elementError("Element Out of Bounds")}\n    right:0;\n  }`,getSetting("image squash","on")&&(e+="\n  body.debug [data-debug*=img-squash]{\n    outline: 2px solid red;\n  }\n  "),styleTag.innerHTML=e,computedStyles()}function elementError(e){return`\n  content: '⚠️${e}';\n  padding: 2px;\n  position: absolute;\n  text-shadow: 1px 0px 1px #00000060;\n  color: red;\n  background-color: #ff000040 !important;`}let body,script,allElms,containers,rows,cols,flexibles;function initialize(){body=document.body,script=body.querySelector("#debug-script"),allElms=body.querySelectorAll("*"),containers=body.querySelectorAll("[class*=container]"),rows=body.querySelectorAll(".row"),cols=body.querySelectorAll("[class^=col-]"),flexibles=Array.from(allElms).filter((e=>"flex"==getStyle(e).display)),body.appendChild(button),body.appendChild(settingsButton),body.appendChild(settingsMenu),body.append(styleTag),body.append(debugMenuStyleTag),menuStyles(),implementStyles(),drawButton(),drawMenu(),getSetting("active","on")||(document.body.classList.remove("debug"),unsetBgs())}function computedStyles(){unsetBgs(),getSetting("column color","on")&&cols.forEach((e=>{"rgba(0, 0, 0, 0)"==getStyle(e).backgroundColor&&(e.style.backgroundColor=getSetting("column color")+hexTransparency)})),flexibles.forEach((e=>{if(e.setAttribute("data-debug","flex"),getSetting("flex lines","on")){let t=getStyle(e);"none"==t.backgroundImage?e.style.backgroundImage="url(https://www.transparenttextures.com/patterns/axiom-pattern.png)":(e.style.backgroundImage="url(https://www.transparenttextures.com/patterns/axiom-pattern.png),"+t.backgroundImage,e.style.backgroundSize="75px, "+t.backgroundSize)}}));const e=Array.from(allElms).filter((e=>"relative"==getStyle(e).position)),t=Array.from(allElms).filter((e=>"absolute"==getStyle(e).position));e.forEach(((e,t)=>{e.setAttribute("data-debug","relative"),e.style.outlineOffset=-1*parseInt(getStyle(e).padding)+"px"})),t.forEach((e=>e.setAttribute("data-debug","absolute"))),getSetting("horizontal spill","on")&&horizontalScrollPolice(),getSetting("image squash","on")&&imageSquashPolice()}function unsetBgs(){Array.from(flexibles).filter((e=>getStyle(e).backgroundImage.includes("transparenttextures.com"))).forEach((e=>{let t=getStyle(e).backgroundImage.split(",").slice(1),n=getStyle(e).backgroundSize.split(",").slice(1);t.length?(e.style.backgroundImage=t.join(","),e.style.backgroundSize=n.join(",")):e.style.backgroundImage="unset"}));let e=getSetting("column color")+hexTransparency;Array.from(cols).filter((t=>getStyle(t).backgroundColor==hexToRGBA(e))).forEach((e=>{e.style.backgroundColor="rgba(0, 0, 0, 0)"}))}function horizontalScrollPolice(){let e=window.innerWidth;allElms.forEach((t=>{let n=t.getBoundingClientRect();n.left+n.width>e&&t.setAttribute("data-debug","out-of-bounds")}))}function imageSquashPolice(){document.querySelectorAll("img").forEach((e=>{if((e.offsetWidth/e.offsetHeight).toFixed(2)!=(e.naturalWidth/e.naturalHeight).toFixed(2)){"fill"==getStyle(e).objectFit&&(e.setAttribute("data-debug","img-squash"),console.warn("⚠️ squashed image alert ⬇️"),console.log(e))}}))}function getStyle(e){return window.getComputedStyle(e)}function drawButton(){getSetting("active","on")?(button.innerText="🐛 on",button.classList.remove("off")):(button.innerText="🐛 off",button.classList.add("off"))}function drawMenu(){let e="";settings.slice(1).forEach((t=>{e+=`\n  <div>\n    <div>\n      <input type="checkbox" ${t.on?"checked":""} onchange="toggleSetting('${t.name}')"/> ${t.name}\n    </div>\n    <div>\n    ${t.color?`<input type="color" value="${t.color}" onchange="changeSetting('${t.name}', 'color', event)">`:""}\n    </div>\n  </div>`})),document.getElementById("debug-settings-menu").innerHTML=e}function toggleSettingsMenu(){getSetting("menu open","on")?(settingsButton.innerText="⚙️",console.log("🐛debug settings saved"),settings[0].on=!1,saveSettings()):(settingsButton.innerText="💾",settings[0].on=!0),document.getElementById("debug-settings-menu").classList.toggle("d-none")}function toggleSetting(e,t=!0){let n=settings.find((t=>t.name==e));n.on=!n.on,t&&implementStyles()}function changeSetting(e,t,n){let o=n.target.value,i=settings.find((t=>t.name==e));i.on=!1,computedStyles(),i[t]=o,i.on=!0,implementStyles()}function saveSettings(){let e=JSON.stringify(settings);localStorage.setItem("debug-settings",e)}function loadSettings(){let e=localStorage.getItem("debug-settings");e&&(settings=JSON.parse(e))}document.body&&document.body.classList.contains("debug")?(loadSettings(),initialize()):console.warn('Style Debugger is shut off. To turn on, add the class "debug" to the body and refresh.');
//# sourceMappingURL=/sm/847cb04124c12085cb78dedf7c60ca606de38302ac8e9d50bf25060721a3ea5d.map